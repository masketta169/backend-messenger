// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubjectType {
  MATH
  PHYSICS
  CHEMISTRY
  BIOLOGY
  HISTORY
  COMPUTER_SCIENCE
  LITERATURE
}

enum Role {
  STUDENT
  TUTOR
  ADMIN
}

model User {
  id          String       @id @default(uuid())
  name        String
  surname     String
  second_name String?
  role        Role
  subjects    SubjectType[]
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())

  tag         String?      @unique @default(uuid())

  refreshToken String?

  // Связь с личными чатами
  // privateChats PrivateChat[] @relation("PrivateChatUser")

  // Связь с групповыми чатами
  groupChats   GroupChatUser[]

  chats       ChatUser[]
  messages    Message[]

  privateChatsAsUser1 PrivateChat[] @relation("PrivateChatUser1")
  privateChatsAsUser2 PrivateChat[] @relation("PrivateChatUser2")

  createdGroupChats GroupChat[] @relation("GroupChatCreator")
}

model PrivateChat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user1Id   String
  user1     User     @relation("PrivateChatUser1", fields: [user1Id], references: [id])

  user2Id   String
  user2     User     @relation("PrivateChatUser2", fields: [user2Id], references: [id])

  messages  Message[]

  @@unique([user1Id, user2Id])  // Чтобы гарантировать уникальность пары пользователей
}


model GroupChat {
  id        String   @id @default(uuid())
  name      String?
  createdAt DateTime @default(now())
  creatorId String
  creator   User     @relation("GroupChatCreator", fields: [creatorId], references: [id])

  messages  Message[]
  users     GroupChatUser[]

  // Создание уникального индекса для групповых чатов, чтобы не было дубликатов
  @@unique([name, creatorId]) 
}

model GroupChatUser {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  groupChatId String
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade)

  @@unique([userId, groupChatId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  chatId    String
  chat      PrivateChat @relation(fields: [chatId], references: [id])

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  GroupChat GroupChat[]

  Chat Chat[]
}

model Chat {
  id        String   @id @default(uuid())
  name      String?
  createdAt DateTime @default(now())

  messages  Message[]
  users     ChatUser[]
}

model ChatUser {
  id        String @id @default(uuid())
  userId    String
  chatId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}
